#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RebelsDB")]
	public partial class IqueueDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertConsultation(Consultation instance);
    partial void UpdateConsultation(Consultation instance);
    partial void DeleteConsultation(Consultation instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertQueue(Queue instance);
    partial void UpdateQueue(Queue instance);
    partial void DeleteQueue(Queue instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertService_Type(Service_Type instance);
    partial void UpdateService_Type(Service_Type instance);
    partial void DeleteService_Type(Service_Type instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUser_Address(User_Address instance);
    partial void UpdateUser_Address(User_Address instance);
    partial void DeleteUser_Address(User_Address instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    #endregion
		
		public IqueueDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RebelsDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IqueueDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IqueueDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IqueueDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IqueueDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<Consultation> Consultations
		{
			get
			{
				return this.GetTable<Consultation>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<Queue> Queues
		{
			get
			{
				return this.GetTable<Queue>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Service_Type> Service_Types
		{
			get
			{
				return this.GetTable<Service_Type>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<User_Address> User_Addresses
		{
			get
			{
				return this.GetTable<User_Address>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branch")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Branch_Id;
		
		private string _Name;
		
		private string _Code;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<int> _Address_Id;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<Service> _Services;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranch_IdChanging(int value);
    partial void OnBranch_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddress_IdChanging(System.Nullable<int> value);
    partial void OnAddress_IdChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public Branch()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Branch_Id
		{
			get
			{
				return this._Branch_Id;
			}
			set
			{
				if ((this._Branch_Id != value))
				{
					this.OnBranch_IdChanging(value);
					this.SendPropertyChanging();
					this._Branch_Id = value;
					this.SendPropertyChanged("Branch_Id");
					this.OnBranch_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_Id", DbType="Int")]
		public System.Nullable<int> Address_Id
		{
			get
			{
				return this._Address_Id;
			}
			set
			{
				if ((this._Address_Id != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddress_IdChanging(value);
					this.SendPropertyChanging();
					this._Address_Id = value;
					this.SendPropertyChanged("Address_Id");
					this.OnAddress_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Service", Storage="_Services", ThisKey="Branch_Id", OtherKey="Branch_Id")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Branch", Storage="_Address", ThisKey="Address_Id", OtherKey="Address_Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Branches.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Branches.Add(this);
						this._Address_Id = value.Address_Id;
					}
					else
					{
						this._Address_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Consultation")]
	public partial class Consultation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Consultation_Id;
		
		private int _Service_Id;
		
		private string _Teller;
		
		private string _Status;
		
		private System.Nullable<System.TimeSpan> _Start_At;
		
		private System.Nullable<System.TimeSpan> _End_At;
		
		private System.Nullable<System.TimeSpan> _Duration;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConsultation_IdChanging(int value);
    partial void OnConsultation_IdChanged();
    partial void OnService_IdChanging(int value);
    partial void OnService_IdChanged();
    partial void OnTellerChanging(string value);
    partial void OnTellerChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnStart_AtChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStart_AtChanged();
    partial void OnEnd_AtChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEnd_AtChanged();
    partial void OnDurationChanging(System.Nullable<System.TimeSpan> value);
    partial void OnDurationChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public Consultation()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consultation_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Consultation_Id
		{
			get
			{
				return this._Consultation_Id;
			}
			set
			{
				if ((this._Consultation_Id != value))
				{
					this.OnConsultation_IdChanging(value);
					this.SendPropertyChanging();
					this._Consultation_Id = value;
					this.SendPropertyChanged("Consultation_Id");
					this.OnConsultation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_Id", DbType="Int NOT NULL")]
		public int Service_Id
		{
			get
			{
				return this._Service_Id;
			}
			set
			{
				if ((this._Service_Id != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnService_IdChanging(value);
					this.SendPropertyChanging();
					this._Service_Id = value;
					this.SendPropertyChanged("Service_Id");
					this.OnService_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teller", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Teller
		{
			get
			{
				return this._Teller;
			}
			set
			{
				if ((this._Teller != value))
				{
					this.OnTellerChanging(value);
					this.SendPropertyChanging();
					this._Teller = value;
					this.SendPropertyChanged("Teller");
					this.OnTellerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(64)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_At", DbType="Time")]
		public System.Nullable<System.TimeSpan> Start_At
		{
			get
			{
				return this._Start_At;
			}
			set
			{
				if ((this._Start_At != value))
				{
					this.OnStart_AtChanging(value);
					this.SendPropertyChanging();
					this._Start_At = value;
					this.SendPropertyChanged("Start_At");
					this.OnStart_AtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_At", DbType="Time")]
		public System.Nullable<System.TimeSpan> End_At
		{
			get
			{
				return this._End_At;
			}
			set
			{
				if ((this._End_At != value))
				{
					this.OnEnd_AtChanging(value);
					this.SendPropertyChanging();
					this._End_At = value;
					this.SendPropertyChanged("End_At");
					this.OnEnd_AtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Time")]
		public System.Nullable<System.TimeSpan> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consultation_Ticket", Storage="_Tickets", ThisKey="Consultation_Id", OtherKey="Consultation_Id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Consultation", Storage="_Service", ThisKey="Service_Id", OtherKey="Service_Id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Consultations.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Consultations.Add(this);
						this._Service_Id = value.Service_Id;
					}
					else
					{
						this._Service_Id = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Consultation = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Consultation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Province_Id;
		
		private string _Name;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvince_IdChanging(int value);
    partial void OnProvince_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public Province()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Province_Id
		{
			get
			{
				return this._Province_Id;
			}
			set
			{
				if ((this._Province_Id != value))
				{
					this.OnProvince_IdChanging(value);
					this.SendPropertyChanging();
					this._Province_Id = value;
					this.SendPropertyChanged("Province_Id");
					this.OnProvince_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_City", Storage="_Cities", ThisKey="Province_Id", OtherKey="Province_Id")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Queue")]
	public partial class Queue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Queue_Id;
		
		private int _Service_Id;
		
		private string _Status;
		
		private System.TimeSpan _Average_Waiting_Time;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueue_IdChanging(int value);
    partial void OnQueue_IdChanged();
    partial void OnService_IdChanging(int value);
    partial void OnService_IdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnAverage_Waiting_TimeChanging(System.TimeSpan value);
    partial void OnAverage_Waiting_TimeChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public Queue()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Queue_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Queue_Id
		{
			get
			{
				return this._Queue_Id;
			}
			set
			{
				if ((this._Queue_Id != value))
				{
					this.OnQueue_IdChanging(value);
					this.SendPropertyChanging();
					this._Queue_Id = value;
					this.SendPropertyChanged("Queue_Id");
					this.OnQueue_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_Id", DbType="Int NOT NULL")]
		public int Service_Id
		{
			get
			{
				return this._Service_Id;
			}
			set
			{
				if ((this._Service_Id != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnService_IdChanging(value);
					this.SendPropertyChanging();
					this._Service_Id = value;
					this.SendPropertyChanged("Service_Id");
					this.OnService_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average_Waiting_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Average_Waiting_Time
		{
			get
			{
				return this._Average_Waiting_Time;
			}
			set
			{
				if ((this._Average_Waiting_Time != value))
				{
					this.OnAverage_Waiting_TimeChanging(value);
					this.SendPropertyChanging();
					this._Average_Waiting_Time = value;
					this.SendPropertyChanged("Average_Waiting_Time");
					this.OnAverage_Waiting_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Queue_Ticket", Storage="_Tickets", ThisKey="Queue_Id", OtherKey="Queue_Id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Queue", Storage="_Service", ThisKey="Service_Id", OtherKey="Service_Id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Queues.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Queues.Add(this);
						this._Service_Id = value.Service_Id;
					}
					else
					{
						this._Service_Id = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Queue = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Queue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Service_Id;
		
		private int _Branch_Id;
		
		private int _User_Id;
		
		private int _Type_Id;
		
		private bool _Active;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<Consultation> _Consultations;
		
		private EntitySet<Queue> _Queues;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<Service_Type> _Service_Type;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnService_IdChanging(int value);
    partial void OnService_IdChanged();
    partial void OnBranch_IdChanging(int value);
    partial void OnBranch_IdChanged();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnType_IdChanging(int value);
    partial void OnType_IdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public Service()
		{
			this._Consultations = new EntitySet<Consultation>(new Action<Consultation>(this.attach_Consultations), new Action<Consultation>(this.detach_Consultations));
			this._Queues = new EntitySet<Queue>(new Action<Queue>(this.attach_Queues), new Action<Queue>(this.detach_Queues));
			this._Branch = default(EntityRef<Branch>);
			this._Service_Type = default(EntityRef<Service_Type>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Service_Id
		{
			get
			{
				return this._Service_Id;
			}
			set
			{
				if ((this._Service_Id != value))
				{
					this.OnService_IdChanging(value);
					this.SendPropertyChanging();
					this._Service_Id = value;
					this.SendPropertyChanged("Service_Id");
					this.OnService_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Branch_Id
		{
			get
			{
				return this._Branch_Id;
			}
			set
			{
				if ((this._Branch_Id != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_IdChanging(value);
					this.SendPropertyChanging();
					this._Branch_Id = value;
					this.SendPropertyChanged("Branch_Id");
					this.OnBranch_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Type_Id
		{
			get
			{
				return this._Type_Id;
			}
			set
			{
				if ((this._Type_Id != value))
				{
					if (this._Service_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnType_IdChanging(value);
					this.SendPropertyChanging();
					this._Type_Id = value;
					this.SendPropertyChanged("Type_Id");
					this.OnType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Consultation", Storage="_Consultations", ThisKey="Service_Id", OtherKey="Service_Id")]
		public EntitySet<Consultation> Consultations
		{
			get
			{
				return this._Consultations;
			}
			set
			{
				this._Consultations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Queue", Storage="_Queues", ThisKey="Service_Id", OtherKey="Service_Id")]
		public EntitySet<Queue> Queues
		{
			get
			{
				return this._Queues;
			}
			set
			{
				this._Queues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Service", Storage="_Branch", ThisKey="Branch_Id", OtherKey="Branch_Id", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._Branch_Id = value.Branch_Id;
					}
					else
					{
						this._Branch_Id = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Type_Service", Storage="_Service_Type", ThisKey="Type_Id", OtherKey="Type_Id", IsForeignKey=true)]
		public Service_Type Service_Type
		{
			get
			{
				return this._Service_Type.Entity;
			}
			set
			{
				Service_Type previousValue = this._Service_Type.Entity;
				if (((previousValue != value) 
							|| (this._Service_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service_Type.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Service_Type.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._Type_Id = value.Type_Id;
					}
					else
					{
						this._Type_Id = default(int);
					}
					this.SendPropertyChanged("Service_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Service", Storage="_User", ThisKey="User_Id", OtherKey="User_Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._User_Id = value.User_Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Consultations(Consultation entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Consultations(Consultation entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_Queues(Queue entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Queues(Queue entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service_Type")]
	public partial class Service_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Type_Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnType_IdChanging(int value);
    partial void OnType_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public Service_Type()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Type_Id
		{
			get
			{
				return this._Type_Id;
			}
			set
			{
				if ((this._Type_Id != value))
				{
					this.OnType_IdChanging(value);
					this.SendPropertyChanging();
					this._Type_Id = value;
					this.SendPropertyChanged("Type_Id");
					this.OnType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(64)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Type_Service", Storage="_Services", ThisKey="Type_Id", OtherKey="Type_Id")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Service_Type = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Service_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ticket_Id;
		
		private int _User_Id;
		
		private int _Queue_Id;
		
		private int _Consultation_Id;
		
		private string _Token;
		
		private System.Nullable<System.TimeSpan> _Average_Waiting_Time;
		
		private string _Status;
		
		private string _Type;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntityRef<Consultation> _Consultation;
		
		private EntityRef<Queue> _Queue;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicket_IdChanging(int value);
    partial void OnTicket_IdChanged();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnQueue_IdChanging(int value);
    partial void OnQueue_IdChanged();
    partial void OnConsultation_IdChanging(int value);
    partial void OnConsultation_IdChanged();
    partial void OnTokenChanging(string value);
    partial void OnTokenChanged();
    partial void OnAverage_Waiting_TimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnAverage_Waiting_TimeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public Ticket()
		{
			this._Consultation = default(EntityRef<Consultation>);
			this._Queue = default(EntityRef<Queue>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticket_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Ticket_Id
		{
			get
			{
				return this._Ticket_Id;
			}
			set
			{
				if ((this._Ticket_Id != value))
				{
					this.OnTicket_IdChanging(value);
					this.SendPropertyChanging();
					this._Ticket_Id = value;
					this.SendPropertyChanged("Ticket_Id");
					this.OnTicket_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL")]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Queue_Id", DbType="Int NOT NULL")]
		public int Queue_Id
		{
			get
			{
				return this._Queue_Id;
			}
			set
			{
				if ((this._Queue_Id != value))
				{
					if (this._Queue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQueue_IdChanging(value);
					this.SendPropertyChanging();
					this._Queue_Id = value;
					this.SendPropertyChanged("Queue_Id");
					this.OnQueue_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consultation_Id", DbType="Int NOT NULL")]
		public int Consultation_Id
		{
			get
			{
				return this._Consultation_Id;
			}
			set
			{
				if ((this._Consultation_Id != value))
				{
					if (this._Consultation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsultation_IdChanging(value);
					this.SendPropertyChanging();
					this._Consultation_Id = value;
					this.SendPropertyChanged("Consultation_Id");
					this.OnConsultation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average_Waiting_Time", DbType="Time")]
		public System.Nullable<System.TimeSpan> Average_Waiting_Time
		{
			get
			{
				return this._Average_Waiting_Time;
			}
			set
			{
				if ((this._Average_Waiting_Time != value))
				{
					this.OnAverage_Waiting_TimeChanging(value);
					this.SendPropertyChanging();
					this._Average_Waiting_Time = value;
					this.SendPropertyChanged("Average_Waiting_Time");
					this.OnAverage_Waiting_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consultation_Ticket", Storage="_Consultation", ThisKey="Consultation_Id", OtherKey="Consultation_Id", IsForeignKey=true)]
		public Consultation Consultation
		{
			get
			{
				return this._Consultation.Entity;
			}
			set
			{
				Consultation previousValue = this._Consultation.Entity;
				if (((previousValue != value) 
							|| (this._Consultation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Consultation.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Consultation.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._Consultation_Id = value.Consultation_Id;
					}
					else
					{
						this._Consultation_Id = default(int);
					}
					this.SendPropertyChanged("Consultation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Queue_Ticket", Storage="_Queue", ThisKey="Queue_Id", OtherKey="Queue_Id", IsForeignKey=true)]
		public Queue Queue
		{
			get
			{
				return this._Queue.Entity;
			}
			set
			{
				Queue previousValue = this._Queue.Entity;
				if (((previousValue != value) 
							|| (this._Queue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Queue.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Queue.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._Queue_Id = value.Queue_Id;
					}
					else
					{
						this._Queue_Id = default(int);
					}
					this.SendPropertyChanged("Queue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ticket", Storage="_User", ThisKey="User_Id", OtherKey="User_Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._User_Id = value.User_Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Title;
		
		private string _Email;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _Dob;
		
		private string _Phone;
		
		private string _Password_Hash;
		
		private bool _ActiveAccount;
		
		private bool _Online;
		
		private int _LoginCount;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntitySet<User_Address> _User_Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDobChanging(System.Nullable<System.DateTime> value);
    partial void OnDobChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPassword_HashChanging(string value);
    partial void OnPassword_HashChanged();
    partial void OnActiveAccountChanging(bool value);
    partial void OnActiveAccountChanged();
    partial void OnOnlineChanging(bool value);
    partial void OnOnlineChanged();
    partial void OnLoginCountChanging(int value);
    partial void OnLoginCountChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public User()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._User_Addresses = new EntitySet<User_Address>(new Action<User_Address>(this.attach_User_Addresses), new Action<User_Address>(this.detach_User_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(64)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(64)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dob", DbType="Date")]
		public System.Nullable<System.DateTime> Dob
		{
			get
			{
				return this._Dob;
			}
			set
			{
				if ((this._Dob != value))
				{
					this.OnDobChanging(value);
					this.SendPropertyChanging();
					this._Dob = value;
					this.SendPropertyChanged("Dob");
					this.OnDobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password_Hash", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Password_Hash
		{
			get
			{
				return this._Password_Hash;
			}
			set
			{
				if ((this._Password_Hash != value))
				{
					this.OnPassword_HashChanging(value);
					this.SendPropertyChanging();
					this._Password_Hash = value;
					this.SendPropertyChanged("Password_Hash");
					this.OnPassword_HashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveAccount", DbType="Bit NOT NULL")]
		public bool ActiveAccount
		{
			get
			{
				return this._ActiveAccount;
			}
			set
			{
				if ((this._ActiveAccount != value))
				{
					this.OnActiveAccountChanging(value);
					this.SendPropertyChanging();
					this._ActiveAccount = value;
					this.SendPropertyChanged("ActiveAccount");
					this.OnActiveAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Online", DbType="Bit NOT NULL")]
		public bool Online
		{
			get
			{
				return this._Online;
			}
			set
			{
				if ((this._Online != value))
				{
					this.OnOnlineChanging(value);
					this.SendPropertyChanging();
					this._Online = value;
					this.SendPropertyChanged("Online");
					this.OnOnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginCount", DbType="Int NOT NULL")]
		public int LoginCount
		{
			get
			{
				return this._LoginCount;
			}
			set
			{
				if ((this._LoginCount != value))
				{
					this.OnLoginCountChanging(value);
					this.SendPropertyChanging();
					this._LoginCount = value;
					this.SendPropertyChanged("LoginCount");
					this.OnLoginCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Service", Storage="_Services", ThisKey="User_Id", OtherKey="User_Id")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ticket", Storage="_Tickets", ThisKey="User_Id", OtherKey="User_Id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Address", Storage="_User_Addresses", ThisKey="User_Id", OtherKey="User_Id")]
		public EntitySet<User_Address> User_Addresses
		{
			get
			{
				return this._User_Addresses;
			}
			set
			{
				this._User_Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_User_Addresses(User_Address entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_User_Addresses(User_Address entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Address")]
	public partial class User_Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Id;
		
		private int _Address_Id;
		
		private System.DateTime _Intial_Date;
		
		private EntityRef<User> _User;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnAddress_IdChanging(int value);
    partial void OnAddress_IdChanged();
    partial void OnIntial_DateChanging(System.DateTime value);
    partial void OnIntial_DateChanged();
    #endregion
		
		public User_Address()
		{
			this._User = default(EntityRef<User>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Address_Id
		{
			get
			{
				return this._Address_Id;
			}
			set
			{
				if ((this._Address_Id != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddress_IdChanging(value);
					this.SendPropertyChanging();
					this._Address_Id = value;
					this.SendPropertyChanged("Address_Id");
					this.OnAddress_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Intial_Date
		{
			get
			{
				return this._Intial_Date;
			}
			set
			{
				if ((this._Intial_Date != value))
				{
					this.OnIntial_DateChanging(value);
					this.SendPropertyChanging();
					this._Intial_Date = value;
					this.SendPropertyChanged("Intial_Date");
					this.OnIntial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Address", Storage="_User", ThisKey="User_Id", OtherKey="User_Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.User_Addresses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.User_Addresses.Add(this);
						this._User_Id = value.User_Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_User_Address", Storage="_Address", ThisKey="Address_Id", OtherKey="Address_Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.User_Addresses.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.User_Addresses.Add(this);
						this._Address_Id = value.Address_Id;
					}
					else
					{
						this._Address_Id = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Address_Id;
		
		private string _Address1;
		
		private string _Address2;
		
		private int _City_Id;
		
		private string _Latitude;
		
		private string _Longitude;
		
		private string _Postal_Code;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<Branch> _Branches;
		
		private EntitySet<User_Address> _User_Addresses;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddress_IdChanging(int value);
    partial void OnAddress_IdChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCity_IdChanging(int value);
    partial void OnCity_IdChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnPostal_CodeChanging(string value);
    partial void OnPostal_CodeChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public Address()
		{
			this._Branches = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches), new Action<Branch>(this.detach_Branches));
			this._User_Addresses = new EntitySet<User_Address>(new Action<User_Address>(this.attach_User_Addresses), new Action<User_Address>(this.detach_User_Addresses));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Address_Id
		{
			get
			{
				return this._Address_Id;
			}
			set
			{
				if ((this._Address_Id != value))
				{
					this.OnAddress_IdChanging(value);
					this.SendPropertyChanging();
					this._Address_Id = value;
					this.SendPropertyChanged("Address_Id");
					this.OnAddress_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(64)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(64)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Id", DbType="Int NOT NULL")]
		public int City_Id
		{
			get
			{
				return this._City_Id;
			}
			set
			{
				if ((this._City_Id != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCity_IdChanging(value);
					this.SendPropertyChanging();
					this._City_Id = value;
					this.SendPropertyChanged("City_Id");
					this.OnCity_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="VarChar(255)")]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="VarChar(255)")]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postal_Code", DbType="VarChar(8)")]
		public string Postal_Code
		{
			get
			{
				return this._Postal_Code;
			}
			set
			{
				if ((this._Postal_Code != value))
				{
					this.OnPostal_CodeChanging(value);
					this.SendPropertyChanging();
					this._Postal_Code = value;
					this.SendPropertyChanged("Postal_Code");
					this.OnPostal_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Branch", Storage="_Branches", ThisKey="Address_Id", OtherKey="Address_Id")]
		public EntitySet<Branch> Branches
		{
			get
			{
				return this._Branches;
			}
			set
			{
				this._Branches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_User_Address", Storage="_User_Addresses", ThisKey="Address_Id", OtherKey="Address_Id")]
		public EntitySet<User_Address> User_Addresses
		{
			get
			{
				return this._User_Addresses;
			}
			set
			{
				this._User_Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Address", Storage="_City", ThisKey="City_Id", OtherKey="City_Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._City_Id = value.City_Id;
					}
					else
					{
						this._City_Id = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Branches(Branch entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Branches(Branch entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_User_Addresses(User_Address entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_User_Addresses(User_Address entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _City_Id;
		
		private string _Name;
		
		private int _Province_Id;
		
		private System.DateTime _Last_Update;
		
		private System.DateTime _Initial_Date;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<Province> _Province;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCity_IdChanging(int value);
    partial void OnCity_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProvince_IdChanging(int value);
    partial void OnProvince_IdChanged();
    partial void OnLast_UpdateChanging(System.DateTime value);
    partial void OnLast_UpdateChanged();
    partial void OnInitial_DateChanging(System.DateTime value);
    partial void OnInitial_DateChanged();
    #endregion
		
		public City()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Province = default(EntityRef<Province>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int City_Id
		{
			get
			{
				return this._City_Id;
			}
			set
			{
				if ((this._City_Id != value))
				{
					this.OnCity_IdChanging(value);
					this.SendPropertyChanging();
					this._City_Id = value;
					this.SendPropertyChanged("City_Id");
					this.OnCity_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province_Id", DbType="Int NOT NULL")]
		public int Province_Id
		{
			get
			{
				return this._Province_Id;
			}
			set
			{
				if ((this._Province_Id != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvince_IdChanging(value);
					this.SendPropertyChanging();
					this._Province_Id = value;
					this.SendPropertyChanged("Province_Id");
					this.OnProvince_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Update", DbType="DateTime NOT NULL")]
		public System.DateTime Last_Update
		{
			get
			{
				return this._Last_Update;
			}
			set
			{
				if ((this._Last_Update != value))
				{
					this.OnLast_UpdateChanging(value);
					this.SendPropertyChanging();
					this._Last_Update = value;
					this.SendPropertyChanged("Last_Update");
					this.OnLast_UpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Initial_Date
		{
			get
			{
				return this._Initial_Date;
			}
			set
			{
				if ((this._Initial_Date != value))
				{
					this.OnInitial_DateChanging(value);
					this.SendPropertyChanging();
					this._Initial_Date = value;
					this.SendPropertyChanged("Initial_Date");
					this.OnInitial_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Address", Storage="_Addresses", ThisKey="City_Id", OtherKey="City_Id")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_City", Storage="_Province", ThisKey="Province_Id", OtherKey="Province_Id", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._Province_Id = value.Province_Id;
					}
					else
					{
						this._Province_Id = default(int);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
}
#pragma warning restore 1591
